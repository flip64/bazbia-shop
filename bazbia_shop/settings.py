"""
Django settings for bazbia_shop project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# مسیر ذخیره‌سازی فایل‌های استاتیک جمع‌آوری شده
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# مسیرهای اضافی برای فایل‌های استاتیک
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# مسیر ذخیره‌سازی فایل‌های استاتیک جمع‌آوری‌شده

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'login'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kc_0advz4=!81sw-0h0t5gwt@^kh9^$c#wrrws^4r#$yv0%+y^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'corsheaders',    
    'django.contrib.humanize',
    
    
    # اپ های پروژه
    'core',
    'customers',
    'products',
    'orders',
    'payments',
    'promotions',
    'notifications',
    'accounting', 
    'inventory',
    'scrap_abdisite',
    'suppliers',
    'schema_viewer',


]

MIDDLEWARE = [
    
    

    'corsheaders.middleware.CorsMiddleware',  # این رو اول همه middleware ها بذار
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'bazbia_shop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',



                # اضافه کردن context processor بنرها و دست بندی
                'promotions.context_processors.banners_processor',
                'promotions.context_processors.categories_processor',


            ],
        },
    },
]

WSGI_APPLICATION = 'bazbia_shop.wsgi.application'




# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

db_engine = os.environ.get("DB_ENGINE", "").lower()

if db_engine == "postgres":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get("POSTGRES_DB", ""), 
            'USER': os.environ.get("bazbiair_bazbia", ""),
            'PASSWORD': os.environ.get("POSTGRES_PASSWORD", ""),
            'HOST': os.environ.get("POSTGRES_HOST", ""),
            'PORT': os.environ.get("POSTGRES_PORT", "5432"),
        }
    }

elif db_engine == "mysql":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get("MYSQL_DB", ""),
            'USER': os.environ.get("MYSQL_USER", ""),
            'PASSWORD': os.environ.get("MYSQL_PASSWORD", ""),
            'HOST': os.environ.get("MYSQL_HOST", "localhost"),
            'PORT': os.environ.get("MYSQL_PORT", "3306"),
            'OPTIONS': {
                'charset': 'utf8mb4',
            },
        }
    }

else:
    # پیش‌فرض SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }




# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
# تنظیمات منطقه زمانی 


import os
from django.utils import timezone

# خواندن USE_TZ از محیط
USE_TZ = os.environ.get("DJANGO_USE_TZ", "false").lower() != "false"

# رشته TIME_ZONE همیشه معتبر باشد
TIME_ZONE = "UTC"

# اگر USE_TZ=false بود، توابع زمان را override کنیم تا خطای ZoneInfo ندهد
if not USE_TZ:
    class FixedTimezone:
        def utcoffset(self, dt): return None
        def tzname(self, dt): return None
        def dst(self, dt): return None

    timezone.get_default_timezone = lambda: FixedTimezone()
    timezone.get_current_timezone = lambda: FixedTimezone()
    timezone.localtime = lambda value=None, timezone=None: value
    timezone.template_localtime = lambda value, use_tz=None: value
USE_I18N = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# تنظیمات SMTP برای Gmail
# تنظیمات ایمیل
load_dotenv(os.path.join(BASE_DIR, '.env'))



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'  # تبدیل به boolean
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')


CART_SESSION_ID = 'cart'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}




SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),  # مدت اعتبار توکن ورود
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # مدت اعتبار توکن تمدید
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

CORS_ALLOW_ALL_ORIGINS = True  # فقط در حالت توسعه (برای production باید محدود بشه)

CORS_ALLOWED_ORIGINS = [
    "https://bazbia.ir",
    "https://www.bazbia.ir",
    "https://backend.bazbia.ir",
    "http://localhost:3000",  # اگر برای توسعه در Vite تست می‌کنی
]

CSRF_TRUSTED_ORIGINS = [
    "https://bazbia.ir",
    "https://www.bazbia.ir",
    "https://backend.bazbia.ir",
    "http://localhost:3000",
]

 
